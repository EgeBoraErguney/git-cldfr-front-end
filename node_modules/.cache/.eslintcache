[{"/Users/egeerguney/Desktop/Cloudflare/git-cldfr-front-end/src/index.js":"1","/Users/egeerguney/Desktop/Cloudflare/git-cldfr-front-end/src/App.js":"2","/Users/egeerguney/Desktop/Cloudflare/git-cldfr-front-end/src/reportWebVitals.js":"3","/Users/egeerguney/Desktop/Cloudflare/git-cldfr-front-end/src/components/HomeComponent.js":"4","/Users/egeerguney/Desktop/Cloudflare/git-cldfr-front-end/src/components/PostComponent.js":"5","/Users/egeerguney/Desktop/Cloudflare/git-cldfr-front-end/src/components/CreatePostComponent.js":"6"},{"size":500,"mtime":1636103323039,"results":"7","hashOfConfig":"8"},{"size":575,"mtime":1636198850312,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1636103323040,"results":"10","hashOfConfig":"8"},{"size":5131,"mtime":1636236816254,"results":"11","hashOfConfig":"8"},{"size":2586,"mtime":1636235190779,"results":"12","hashOfConfig":"8"},{"size":2089,"mtime":1636235567879,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1bcnelj",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/Users/egeerguney/Desktop/Cloudflare/git-cldfr-front-end/src/index.js",[],["30","31"],"/Users/egeerguney/Desktop/Cloudflare/git-cldfr-front-end/src/App.js",["32"],"import \"./App.css\";\nimport \"./components/HomeComponent.js\";\nimport HomeComponent from \"./components/HomeComponent.js\";\nimport PostComponent from \"./components/PostComponent.js\";\nimport { render } from \"react-dom\";\nimport { BrowserRouter,Routes,Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<HomeComponent />}/>\n          <Route path=\"/posts/:post\" element={<PostComponent />} />\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/egeerguney/Desktop/Cloudflare/git-cldfr-front-end/src/reportWebVitals.js",[],"/Users/egeerguney/Desktop/Cloudflare/git-cldfr-front-end/src/components/HomeComponent.js",["33","34","35","36","37","38"],"import { useEffect, useState, useRef } from \"react\";\nimport {\n  Paper,\n  Typography,\n  Button,\n  IconButton,\n  Modal,\n  Box,\n} from \"@mui/material\";\nimport logo from \"../logo.svg\";\nimport PostComponent from \"./PostComponent\";\nimport CreatePostComponent from \"./CreatePostComponent\";\nimport { ThumbUp, ThumbDown } from \"@mui/icons-material\";\nimport axios from \"axios\";\n\nfunction HomeComponent() {\n  const [posts, setPosts] = useState([]);\n  const [postModalOpen, setPostModalOpen] = useState(true);\n  const [sortByUpvotes, setSortByUpvotes] = useState(true);\n  const [createPostModalOpen, setCreatePostModalOpen] = useState(false);\n  const [modalPost, setModalPost] = useState({});\n  const [skipFirstRender, setSkipFirstRender] = useState(true);\n\n  function handlePostModalOpen(post) {\n    setModalPost(post);\n  }\n  useEffect(() => {\n    setPostModalOpen(!postModalOpen);\n  }, [modalPost]);\n  function handlePostModalClose() {\n    setModalPost({});\n  }\n  useEffect(() => {\n    let loaded = false;\n    fetch(\"https://back-end.egeboraerguney.workers.dev/posts/\")\n      .then((resp) => resp.json())\n      .then((jsonResp) => {\n        if (!loaded) {\n          setPosts(jsonResp);\n        }\n      })\n      .catch((err) => console.log(err));\n    return () => (loaded = true);\n  }, []);\n\n  function HandleClickVotes(postId, voteType) {\n    var postToChange = posts.find((post) => post.id === postId);\n    if (voteType === \"up\") postToChange.upvotes += 1;\n    else if (voteType === \"down\") postToChange.downvotes += 1;\n    const headers = {\n      contentType: \"application/json\",\n    };\n    axios\n      .post(\n        \"https://back-end.egeboraerguney.workers.dev/posts/\",\n        postToChange,\n        {\n          headers,\n        }\n      )\n      .then((response) => {})\n      .catch((err) => {\n        console.log(err);\n      });\n    setPosts([...posts]);\n  }\n  return (\n    <>\n      <img style={{ marginTop: \"16px\", width: \"400px\" }} src={logo} />\n      <Typography\n        sx={{\n          mt: \"0px\",\n        }}\n        variant=\"h6\"\n      >\n        Social Media Application by Ege Bora Erg√ºney\n      </Typography>\n      <Button\n        sx={{\n          mt: \"16px !important\",\n        }}\n        variant=\"contained\"\n        onClick={() => setCreatePostModalOpen(true)}\n      >\n        Create new Post\n      </Button>\n      <Typography\n        sx={{\n          mt: \"0px\",\n        }}\n      >\n        <Button\n          sx={{\n            mt: \"16px !important\",\n          }}\n          variant=\"primary\"\n          onClick={() => setSortByUpvotes(!sortByUpvotes)}\n        >\n          Sorting by\n          {sortByUpvotes ? (\n            <span style={{ marginLeft: \"4px\" }}>upvotes</span>\n          ) : (\n            <span style={{ marginLeft: \"4px\" }}>downvotes</span>\n          )}\n        </Button>\n      </Typography>\n\n      {posts\n        .sort((a, b) => {\n          return sortByUpvotes\n            ? b.upvotes - a.upvotes\n            : b.downvotes - a.downvotes;\n        })\n        .map((post) => (\n          <Paper\n            key={post.id}\n            sx={{\n              mt: \"32px !important\",\n              margin: \"auto\",\n              width: \"60%\",\n              padding: \"16px\",\n            }}\n            elevation={3}\n          >\n            <Typography variant=\"h5\">{post.title}</Typography>\n            <Typography\n              sx={{\n                mt: \"8px\",\n                mb: \"8px\",\n              }}\n              paragraph={true}\n            >\n              {post.content}\n            </Typography>\n            <Typography\n              sx={{\n                mt: \"8px\",\n                mb: \"16px\",\n              }}\n              variant=\"h6\"\n            >\n              <IconButton onClick={() => HandleClickVotes(post.id, \"up\")}>\n                <ThumbUp color=\"primary\" />\n                <span style={{ marginLeft: \"4px\" }}>{post.upvotes}</span>\n              </IconButton>\n              <IconButton onClick={() => HandleClickVotes(post.id, \"down\")}>\n                <ThumbDown sx={{ color: \"red\" }} />\n                <span style={{ marginLeft: \"4px\" }}>{post.downvotes}</span>\n              </IconButton>\n            </Typography>\n            <Typography\n              variant=\"h6\"\n              sx={{\n                mt: \"-16px\",\n                float: \"right\",\n              }}\n            >\n              {post.username}\n            </Typography>\n            <Typography\n              variant=\"h6\"\n              sx={{\n                mt: \"-16px\",\n                float: \"left\",\n              }}\n              onClick={() => handlePostModalOpen(post)}\n            >\n              {post.comments && <span>{post.comments.length} comments</span>}\n              {!post.comments && <span>Add a comment</span>}\n            </Typography>\n          </Paper>\n        ))}\n      <Modal open={postModalOpen} onClose={handlePostModalClose}>\n        <PostComponent modalPost={modalPost} />\n      </Modal>\n      <Modal\n        open={createPostModalOpen}\n        onClose={() => {\n          setCreatePostModalOpen(false);\n        }}\n      >\n        <CreatePostComponent />\n      </Modal>\n    </>\n  );\n}\n\nexport default HomeComponent;\n","/Users/egeerguney/Desktop/Cloudflare/git-cldfr-front-end/src/components/PostComponent.js",[],"/Users/egeerguney/Desktop/Cloudflare/git-cldfr-front-end/src/components/CreatePostComponent.js",["39"],"import { Typography, Box, Paper, TextField, Button } from \"@mui/material\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\n\nconst CreatePostComponent = () => {\n  const [formData, setFormData] = useState({});\n  function postData() {\n    var newFormData = { ...formData, upvotes: 0, downvotes: 0 };\n    const headers = {\n      contentType: \"application/json\",\n    };\n    axios\n      .post(\n        \"https://back-end.egeboraerguney.workers.dev/posts/\",\n        newFormData,\n        {\n          headers,\n        }\n      )\n      .then((response) => {\n        window.location.reload(false);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n  return (\n    <>\n      <Box sx={style}>\n        <Typography variant=\"h6\" component=\"h2\">\n          Create new post\n        </Typography>\n        <Typography sx={{ mt: 2 }}>\n          <TextField\n            onChange={(event) => {\n              setFormData({ ...formData, title: event.target.value });\n            }}\n            label=\"title\"\n            variant=\"outlined\"\n          />\n        </Typography>\n        <Typography sx={{ mt: 2 }}>\n          <TextField\n            onChange={(event) => {\n              setFormData({ ...formData, username: event.target.value });\n            }}\n            label=\"username\"\n            variant=\"outlined\"\n          />\n        </Typography>\n        <Typography sx={{ mt: 2 }}>\n          <TextField\n            onChange={(event) => {\n              setFormData({ ...formData, content: event.target.value });\n            }}\n            label=\"content\"\n            variant=\"outlined\"\n          />\n        </Typography>\n        <Typography sx={{ mt: 2 }}>\n          <Button onClick={() => postData()} variant=\"contained\">\n            Submit\n          </Button>\n        </Typography>\n      </Box>\n    </>\n  );\n};\nconst style = {\n  textAlign: \"center\",\n  position: \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  width: 400,\n  bgcolor: \"background.paper\",\n  border: \"2px solid #000\",\n  boxShadow: 24,\n  p: 4,\n};\n\nexport default CreatePostComponent;\n",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":5,"column":10,"nodeType":"46","messageId":"47","endLine":5,"endColumn":16},{"ruleId":"44","severity":1,"message":"48","line":1,"column":31,"nodeType":"46","messageId":"47","endLine":1,"endColumn":37},{"ruleId":"44","severity":1,"message":"49","line":8,"column":3,"nodeType":"46","messageId":"47","endLine":8,"endColumn":6},{"ruleId":"44","severity":1,"message":"50","line":22,"column":10,"nodeType":"46","messageId":"47","endLine":22,"endColumn":25},{"ruleId":"44","severity":1,"message":"51","line":22,"column":27,"nodeType":"46","messageId":"47","endLine":22,"endColumn":45},{"ruleId":"52","severity":1,"message":"53","line":29,"column":6,"nodeType":"54","endLine":29,"endColumn":17,"suggestions":"55"},{"ruleId":"56","severity":1,"message":"57","line":69,"column":7,"nodeType":"58","endLine":69,"endColumn":71},{"ruleId":"44","severity":1,"message":"59","line":1,"column":27,"nodeType":"46","messageId":"47","endLine":1,"endColumn":32},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'Box' is defined but never used.","'skipFirstRender' is assigned a value but never used.","'setSkipFirstRender' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'postModalOpen'. Either include it or remove the dependency array. You can also do a functional update 'setPostModalOpen(p => ...)' if you only need 'postModalOpen' in the 'setPostModalOpen' call.","ArrayExpression",["62"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Paper' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [modalPost, postModalOpen]",{"range":"65","text":"66"},[876,887],"[modalPost, postModalOpen]"]